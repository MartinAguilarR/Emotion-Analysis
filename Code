#Se cargaron los paquetes Tidytext y tidyverse, para analisis de textos y visualización de info

library(remotes)
install_github("EmilHvitfeldt/textdata")
install_github("juliasilge/tidytext")

library("tidytext")
library("tidyverse")
library("stringr")
library("reshape2")
library("wordcloud")
library("RColorBrewer")
library("dplyr")

#Se utiliza el paquete sentiments

sentiments

get_sentiments("bing")


#Asignación de variables

women_data <- read_csv("C:/Users/marti/OneDrive/Desktop/investigacion/Womens_Clothing.csv")
women_data


#Se renombra la columna [5] "Review Text" por "Review"

names(women_data)[5] = "review"
women_data


######   Asignación de variables   #####


# Se separan los tokens por palabra con "unnest_tokens"

#tbl = Selección del data frame.
#output = La columna en la cual se van a crear los tokens.
#input = La columna de la cual va a extraer el texto.
#token = Definicinó de la unidad de texto, algunas de estas pueden ser "words" (palabras individuales), 
# "sentences" (oraciones), "paragraphs" (párrafos) o "ngrams" (secuencia de palabras consecutivas).

women_tokens <- unnest_tokens(tbl= women_data,
                              output = "word",
                              input = "review",
                              token = "words")
women_tokens
dim(women_tokens)      #Numero de filas y columnas


######   Limpieza de datos   #####

#Anti-Join es un codigo para remover palabras comunes como "the", "what", "a" o "to". 

women_tokens <- anti_join(x=women_tokens,
                          y=stop_words,
                          by="word")

# Identificar palabras con mas frecuencia

count(women_tokens,
      word,
      sort = TRUE) 

#Filter() permite eliminar palabras no relevantes (sustantivos,verbos,entre otros)

women_tokens <- filter(women_tokens, word!="dress" & word!="wear" & word!="size" & word!="fit" & word!="fabric")

dim(women_tokens)

#####   Gráfico total palabras  ##### 

# count(): Contar las palabras de mayor a menor.
# filter(): Filtrar las 500 palabras que más se repiten.
# mutate(): Para modificar una columna.
# reorder(): Ordena una variable según el valor de otra variable (generalmente numérica).
# geom_text(): Asigna una etiqueta a los datos.
# xlab(): Elimina el nombre del eje x (así los valores del eje "x" ocupan un mayor espacio en el grafico).
# coord_flip(): Invierte los ejes (sirve cuando el nombre de los valores son muy largos y resultan ilegibles).
# theme_minimal(): Aplica un tipo de fondo al gráfico.

# Grafico frecuencia de palabras

women_tokens %>%
  count(word, sort = TRUE) %>%
  filter(n > 2000) %>%
  mutate(word = reorder(word, n)) %>%
  ggplot(aes(word, n)) +
  geom_text(aes(label=n), hjust= -0.2) +
  geom_col() +
  xlab(NULL) +
  coord_flip()+
  theme_minimal()


##### ANALISIS DE SENTIMIENTOS  #####

#Tidytext contiene lexicos, como: 

# bing: Este léxico clasifica las palabras según el sentimiento, puede ser negativo o positivo.
# nrc: Este léxico clasifica las palabras segun el sentimiento (positivo y negativo) 
# y la emoción (anticipation, disgust, fear, joy, sadness, surprise y trust).

get_sentiments("bing")
get_sentiments("nrc")

women_bing <- women_tokens %>%
  inner_join(get_sentiments("bing"))

women_nrc <- women_tokens %>%
  inner_join(get_sentiments("nrc"))

women_bing %>%
  count(word,sentiment,sort=TRUE)

women_nrc %>%
  count(word,sentiment,sort=TRUE)


#Gráfico palabras valorizadas mas utilizadas

women_bing %>%                                   
  count(word,sentiment,sort=TRUE) %>%              
  group_by(sentiment) %>%                          
  top_n(15) %>%     #Probar con intervalos 5; 10 ; 15                                         
  ungroup() %>%                                  
  mutate(word=reorder(word,n)) %>%                  
  ggplot(aes(word,n,fill=sentiment))+                 
  geom_col(show.legend = FALSE)+              
  geom_text(aes(label=n), hjust= 1.2) +       
  facet_wrap(~sentiment,scales = "free_y") +  
  coord_flip() +                              
  xlab(NULL)  

  women_nrc %>%
  filter(sentiment!="negative" & sentiment!="positive") %>%
  count(word,sentiment,sort=TRUE) %>%             
  group_by(sentiment) %>%                        
  top_n(15) %>%                                                     
  ungroup() %>%                                   
  mutate(word=reorder(word,n)) %>%                
  ggplot(aes(word,n,fill=sentiment))+           
  geom_col(show.legend = FALSE) +
  geom_text(aes(label=n), hjust= 0) +
  facet_wrap(~sentiment,scales = "free_y")+  
  coord_flip() +
  xlab(NULL)

women_nrc %>%
  filter(sentiment=="negative" | sentiment=="positive") %>%
  count(word,sentiment,sort=TRUE) %>%             
  group_by(sentiment) %>%                        
  top_n(15) %>%                                                    
  ungroup() %>%                                   
  mutate(word=reorder(word,n)) %>%                
  ggplot(aes(word,n,fill=sentiment))+           
  geom_col(show.legend = FALSE) +
  geom_text(aes(label=n), hjust= 0) +
  facet_wrap(~sentiment,scales = "free_y")+  
  coord_flip() +
  xlab(NULL)


######    Nube    ######


# Palabras positivas por bing

women_bing%>%
  count(word,sentiment) %>%
  filter(sentiment=="positive") %>%  
  with(wordcloud(words=word,
                 freq=n,
                 max.words = 250,
                 scale = c(3,1),
                 rot.per = 0.3,
                 random.order = FALSE,
                 colors=brewer.pal(6,"Dark2")))

women_bing%>%
  count(word,sentiment) %>%
  filter(sentiment=="negative") %>%  
  with(wordcloud(words=word,
                 freq=n,
                 max.words = 250,
                 scale = c(3,1),
                 rot.per = 0.3,
                 random.order = FALSE,
                 colors=brewer.pal(6,"Dark2")))

# Comparasión de positivo y negativo

women_bing %>%
  count(word,sentiment,sort=TRUE) %>%
  acast(word~sentiment,value.var = "n", fill = 0) %>%
  comparison.cloud(colors = c("red","green"), 
                   max.words = 300,
                   title.size = 2)


women_nrc %>%
  count(word,sentiment,sort=TRUE) %>%
  filter(sentiment!="positive" & sentiment!="negative") %>% 
  acast(word~sentiment,value.var = "n", fill = 0) %>%
  comparison.cloud(title.size = 1.5)
